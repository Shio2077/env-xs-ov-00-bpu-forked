// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

module DelayNWithValid_1(
  input         clock,
  input         reset,
  input         io_in_bits_valid,
  input  [3:0]  io_in_bits_brSlots_0_offset,
  input  [11:0] io_in_bits_brSlots_0_lower,
  input  [1:0]  io_in_bits_brSlots_0_tarStat,
  input         io_in_bits_brSlots_0_sharing,
  input         io_in_bits_brSlots_0_valid,
  input  [3:0]  io_in_bits_tailSlot_offset,
  input  [19:0] io_in_bits_tailSlot_lower,
  input  [1:0]  io_in_bits_tailSlot_tarStat,
  input         io_in_bits_tailSlot_sharing,
  input         io_in_bits_tailSlot_valid,
  input  [3:0]  io_in_bits_pftAddr,
  input         io_in_bits_carry,
  input         io_in_bits_isCall,
  input         io_in_bits_isRet,
  input         io_in_bits_isJalr,
  input         io_in_bits_last_may_be_rvi_call,
  input         io_in_bits_always_taken_0,
  input         io_in_bits_always_taken_1,
  input         io_in_valid,
  output        io_out_bits_valid,
  output [3:0]  io_out_bits_brSlots_0_offset,
  output [11:0] io_out_bits_brSlots_0_lower,
  output [1:0]  io_out_bits_brSlots_0_tarStat,
  output        io_out_bits_brSlots_0_sharing,
  output        io_out_bits_brSlots_0_valid,
  output [3:0]  io_out_bits_tailSlot_offset,
  output [19:0] io_out_bits_tailSlot_lower,
  output [1:0]  io_out_bits_tailSlot_tarStat,
  output        io_out_bits_tailSlot_sharing,
  output        io_out_bits_tailSlot_valid,
  output [3:0]  io_out_bits_pftAddr,
  output        io_out_bits_carry,
  output        io_out_bits_isCall,
  output        io_out_bits_isRet,
  output        io_out_bits_isJalr,
  output        io_out_bits_last_may_be_rvi_call,
  output        io_out_bits_always_taken_0,
  output        io_out_bits_always_taken_1
);

  reg        valid_REG;
  reg        data_valid;
  reg [3:0]  data_brSlots_0_offset;
  reg [11:0] data_brSlots_0_lower;
  reg [1:0]  data_brSlots_0_tarStat;
  reg        data_brSlots_0_sharing;
  reg        data_brSlots_0_valid;
  reg [3:0]  data_tailSlot_offset;
  reg [19:0] data_tailSlot_lower;
  reg [1:0]  data_tailSlot_tarStat;
  reg        data_tailSlot_sharing;
  reg        data_tailSlot_valid;
  reg [3:0]  data_pftAddr;
  reg        data_carry;
  reg        data_isCall;
  reg        data_isRet;
  reg        data_isJalr;
  reg        data_last_may_be_rvi_call;
  reg        data_always_taken_0;
  reg        data_always_taken_1;
  reg        res_bits_valid;
  reg [3:0]  res_bits_brSlots_0_offset;
  reg [11:0] res_bits_brSlots_0_lower;
  reg [1:0]  res_bits_brSlots_0_tarStat;
  reg        res_bits_brSlots_0_sharing;
  reg        res_bits_brSlots_0_valid;
  reg [3:0]  res_bits_tailSlot_offset;
  reg [19:0] res_bits_tailSlot_lower;
  reg [1:0]  res_bits_tailSlot_tarStat;
  reg        res_bits_tailSlot_sharing;
  reg        res_bits_tailSlot_valid;
  reg [3:0]  res_bits_pftAddr;
  reg        res_bits_carry;
  reg        res_bits_isCall;
  reg        res_bits_isRet;
  reg        res_bits_isJalr;
  reg        res_bits_last_may_be_rvi_call;
  reg        res_bits_always_taken_0;
  reg        res_bits_always_taken_1;
  always @(posedge clock or posedge reset) begin
    if (reset)
      valid_REG <= 1'h0;
    else
      valid_REG <= io_in_valid;
  end // always @(posedge, posedge)
  always @(posedge clock) begin
    if (io_in_valid) begin
      data_valid <= io_in_bits_valid;
      data_brSlots_0_offset <= io_in_bits_brSlots_0_offset;
      data_brSlots_0_lower <= io_in_bits_brSlots_0_lower;
      data_brSlots_0_tarStat <= io_in_bits_brSlots_0_tarStat;
      data_brSlots_0_sharing <= io_in_bits_brSlots_0_sharing;
      data_brSlots_0_valid <= io_in_bits_brSlots_0_valid;
      data_tailSlot_offset <= io_in_bits_tailSlot_offset;
      data_tailSlot_lower <= io_in_bits_tailSlot_lower;
      data_tailSlot_tarStat <= io_in_bits_tailSlot_tarStat;
      data_tailSlot_sharing <= io_in_bits_tailSlot_sharing;
      data_tailSlot_valid <= io_in_bits_tailSlot_valid;
      data_pftAddr <= io_in_bits_pftAddr;
      data_carry <= io_in_bits_carry;
      data_isCall <= io_in_bits_isCall;
      data_isRet <= io_in_bits_isRet;
      data_isJalr <= io_in_bits_isJalr;
      data_last_may_be_rvi_call <= io_in_bits_last_may_be_rvi_call;
      data_always_taken_0 <= io_in_bits_always_taken_0;
      data_always_taken_1 <= io_in_bits_always_taken_1;
    end
    if (valid_REG) begin
      res_bits_valid <= data_valid;
      res_bits_brSlots_0_offset <= data_brSlots_0_offset;
      res_bits_brSlots_0_lower <= data_brSlots_0_lower;
      res_bits_brSlots_0_tarStat <= data_brSlots_0_tarStat;
      res_bits_brSlots_0_sharing <= data_brSlots_0_sharing;
      res_bits_brSlots_0_valid <= data_brSlots_0_valid;
      res_bits_tailSlot_offset <= data_tailSlot_offset;
      res_bits_tailSlot_lower <= data_tailSlot_lower;
      res_bits_tailSlot_tarStat <= data_tailSlot_tarStat;
      res_bits_tailSlot_sharing <= data_tailSlot_sharing;
      res_bits_tailSlot_valid <= data_tailSlot_valid;
      res_bits_pftAddr <= data_pftAddr;
      res_bits_carry <= data_carry;
      res_bits_isCall <= data_isCall;
      res_bits_isRet <= data_isRet;
      res_bits_isJalr <= data_isJalr;
      res_bits_last_may_be_rvi_call <= data_last_may_be_rvi_call;
      res_bits_always_taken_0 <= data_always_taken_0;
      res_bits_always_taken_1 <= data_always_taken_1;
    end
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_REG_
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif // FIRRTL_BEFORE_INITIAL
    logic [31:0] _RANDOM[0:3];
    initial begin
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT
        for (logic [2:0] i = 3'h0; i < 3'h4; i += 3'h1) begin
          _RANDOM[i[1:0]] = `RANDOM;
        end
        valid_REG = _RANDOM[2'h0][0];
        data_valid = _RANDOM[2'h0][1];
        data_brSlots_0_offset = _RANDOM[2'h0][5:2];
        data_brSlots_0_lower = _RANDOM[2'h0][17:6];
        data_brSlots_0_tarStat = _RANDOM[2'h0][19:18];
        data_brSlots_0_sharing = _RANDOM[2'h0][20];
        data_brSlots_0_valid = _RANDOM[2'h0][21];
        data_tailSlot_offset = _RANDOM[2'h0][25:22];
        data_tailSlot_lower = {_RANDOM[2'h0][31:26], _RANDOM[2'h1][13:0]};
        data_tailSlot_tarStat = _RANDOM[2'h1][15:14];
        data_tailSlot_sharing = _RANDOM[2'h1][16];
        data_tailSlot_valid = _RANDOM[2'h1][17];
        data_pftAddr = _RANDOM[2'h1][21:18];
        data_carry = _RANDOM[2'h1][22];
        data_isCall = _RANDOM[2'h1][23];
        data_isRet = _RANDOM[2'h1][24];
        data_isJalr = _RANDOM[2'h1][25];
        data_last_may_be_rvi_call = _RANDOM[2'h1][26];
        data_always_taken_0 = _RANDOM[2'h1][27];
        data_always_taken_1 = _RANDOM[2'h1][28];
        res_bits_valid = _RANDOM[2'h1][30];
        res_bits_brSlots_0_offset = {_RANDOM[2'h1][31], _RANDOM[2'h2][2:0]};
        res_bits_brSlots_0_lower = _RANDOM[2'h2][14:3];
        res_bits_brSlots_0_tarStat = _RANDOM[2'h2][16:15];
        res_bits_brSlots_0_sharing = _RANDOM[2'h2][17];
        res_bits_brSlots_0_valid = _RANDOM[2'h2][18];
        res_bits_tailSlot_offset = _RANDOM[2'h2][22:19];
        res_bits_tailSlot_lower = {_RANDOM[2'h2][31:23], _RANDOM[2'h3][10:0]};
        res_bits_tailSlot_tarStat = _RANDOM[2'h3][12:11];
        res_bits_tailSlot_sharing = _RANDOM[2'h3][13];
        res_bits_tailSlot_valid = _RANDOM[2'h3][14];
        res_bits_pftAddr = _RANDOM[2'h3][18:15];
        res_bits_carry = _RANDOM[2'h3][19];
        res_bits_isCall = _RANDOM[2'h3][20];
        res_bits_isRet = _RANDOM[2'h3][21];
        res_bits_isJalr = _RANDOM[2'h3][22];
        res_bits_last_may_be_rvi_call = _RANDOM[2'h3][23];
        res_bits_always_taken_0 = _RANDOM[2'h3][24];
        res_bits_always_taken_1 = _RANDOM[2'h3][25];
      `endif // RANDOMIZE_REG_INIT
      if (reset)
        valid_REG = 1'h0;
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif // FIRRTL_AFTER_INITIAL
  `endif // ENABLE_INITIAL_REG_
  assign io_out_bits_valid = res_bits_valid;
  assign io_out_bits_brSlots_0_offset = res_bits_brSlots_0_offset;
  assign io_out_bits_brSlots_0_lower = res_bits_brSlots_0_lower;
  assign io_out_bits_brSlots_0_tarStat = res_bits_brSlots_0_tarStat;
  assign io_out_bits_brSlots_0_sharing = res_bits_brSlots_0_sharing;
  assign io_out_bits_brSlots_0_valid = res_bits_brSlots_0_valid;
  assign io_out_bits_tailSlot_offset = res_bits_tailSlot_offset;
  assign io_out_bits_tailSlot_lower = res_bits_tailSlot_lower;
  assign io_out_bits_tailSlot_tarStat = res_bits_tailSlot_tarStat;
  assign io_out_bits_tailSlot_sharing = res_bits_tailSlot_sharing;
  assign io_out_bits_tailSlot_valid = res_bits_tailSlot_valid;
  assign io_out_bits_pftAddr = res_bits_pftAddr;
  assign io_out_bits_carry = res_bits_carry;
  assign io_out_bits_isCall = res_bits_isCall;
  assign io_out_bits_isRet = res_bits_isRet;
  assign io_out_bits_isJalr = res_bits_isJalr;
  assign io_out_bits_last_may_be_rvi_call = res_bits_last_may_be_rvi_call;
  assign io_out_bits_always_taken_0 = res_bits_always_taken_0;
  assign io_out_bits_always_taken_1 = res_bits_always_taken_1;
endmodule

